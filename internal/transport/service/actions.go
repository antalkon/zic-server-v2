package service

import (
	"backend/internal/repository"
	zicprotws "backend/internal/transport/zicprot_ws"
	"backend/pkg/cache"
	"encoding/json"
	"fmt"
)

type ActionsService struct {
	actions *repository.ActionsRepository
	cache   *cache.RedisClient
}

func NewActionsService(repo *repository.ActionsRepository, cache *cache.RedisClient) *ActionsService {
	return &ActionsService{actions: repo, cache: cache}
}

func (s *ActionsService) SendReboot(computerID string, delay int) error {
	key := "pc:" + computerID

	raw, err := s.cache.Get(key)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É %s: %w", key, err)
	}

	var data map[string]interface{}
	if err := json.Unmarshal([]byte(raw), &data); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Redis: %w", err)
	}

	tunnelID, ok := data["tunnel_id"].(string)
	if !ok {
		return fmt.Errorf("–ø–æ–ª–µ tunnel_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞")
	}

	// üí° –¢—É—Ç –ø–µ—Ä–µ–¥–∞—ë–º tunnelID –≤–º–µ—Å—Ç–æ computerID!
	err = zicprotws.SendCommandDirect(tunnelID, "REBOOT", map[string]interface{}{
		"force":   false,
		"timeout": delay,
		"message": fmt.Sprintf("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥", delay),
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã REBOOT: %w", err)
	}
	return nil
}
