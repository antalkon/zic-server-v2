package licenze

import (
	glob_config "backend/config"
	"backend/pkg/config"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
)

func CheckLicenze() bool {
	cfg := config.ServiceGet()
	now := time.Now()

	// ‚úÖ –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ç–∞—Ç—É—Å "active" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
	if last, err := time.Parse("2006-01-02", cfg.Licenze.LastCheck); err == nil {
		if last.Format("2006-01-02") == now.Format("2006-01-02") && cfg.Licenze.Status == "active" {
			fmt.Println("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è")
			glob_config.Licenze = true
			return true
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
	exp, err := time.Parse("2006-01-02", cfg.Licenze.Expiration)
	if err != nil || now.After(exp) || cfg.Licenze.Status != "active" {
		fmt.Println("‚ö†Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω–æ–≤–æ...")
		if err := checkReq(); err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:", err)
			glob_config.Licenze = false
			return false
		}
	}

	// –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è, –¥–µ–ª–∞–µ–º –µ—ë
	if err := checkReq(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:", err)
		glob_config.Licenze = false
		return false
	}

	fmt.Println("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
	glob_config.Licenze = true
	return true
}
func checkReq() error {
	cfg := config.ServiceGet()
	url := glob_config.ZicApiUrl + "/check"

	payload := map[string]string{
		"token":  cfg.Licenze.Token,
		"secret": cfg.Licenze.Secret,
	}

	reqBody, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("marshal error: %w", err)
	}

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(reqBody))
	if err != nil {
		return fmt.Errorf("http request error: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf("invalid response: %s", bodyBytes)
	}

	var res struct {
		Expiration string `json:"expiration"` // üü¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
		NewSecret  string `json:"new_secret"`
		AccountID  string `json:"account_id"`
		Token      string `json:"token"` // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—ë—Ç
	}

	if err := json.NewDecoder(resp.Body).Decode(&res); err != nil {
		return fmt.Errorf("decode error: %w", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
	cfg.Licenze.Expiration = res.Expiration
	cfg.Licenze.Secret = res.NewSecret
	cfg.Licenze.AccountID = res.AccountID
	cfg.Licenze.LastCheck = time.Now().Format("2006-01-02")
	cfg.Licenze.Status = "active"
	if res.Token != "" {
		cfg.Licenze.Token = res.Token
	}

	if err := config.ServiceSaveConfig(cfg); err != nil {
		return fmt.Errorf("save config error: %w", err)
	}

	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
	return nil
}
